// to check whether a value in column starts with particular values in this case 'A' ,'E','I' ,'O' ,'U' , other solution is to use multiple LIKE clauses with OR statement, but that isn't efficient 
SELECT DISTINCT CITY FROM STATION WHERE SUBSTRING(CITY,1,1) IN ('A' ,'E','I' ,'O' ,'U');

// use -1 if getting substring from last
SELECT DISTINCT CITY FROM STATION WHERE SUBSTRING(CITY,-1,1) IN ('A' ,'E','I' ,'O' ,'U');

// Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
select name from students where marks > 75 order by substring(name,-3,3) asc, id asc

You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month).

Write a query to output the names of those students whose best friends got offered a higher salary than them. Names must be ordered by the salary amount offered to the best friends. It is guaranteed that no two students got same salary offer.

select s.name from friends f
inner join students s on s.id =f.id
inner join packages khud on khud.id= f.id
inner join packages f_ka  on f_ka.id= f.friend_id
where khud.salary < f_ka.salary order by f_ka.salary;


select concat(name,'(',substring(occupation,1,1),')' from occupations
select concat('There are a total of ',count(occupation),occupation,'s.') from occupations group by occupation order by count(occupation);
another way to concat -> Name || '(' || substr(Occupation, 1,1)|| ')' AS Name
first sort by name then by 1 letter of occupation string -> ORDER BY Name, substr(Occupation, 1,1);


// using row number, later we can perform queries using its alias which is RowNumber in this case
SELECT Studentname, 
       Subject, 
       Marks, 
       ROW_NUMBER() OVER(ORDER BY Marks) RowNumber
FROM ExamResult;

// Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
select 
MAX(case when occupation = 'Doctor' then Name end) as Doctor,
MAX(case when occupation = 'Professor' then Name end) as Professor,
MAX(case when occupation = 'Singer' then Name end) as Singer,
MAX(case when occupation = 'Actor' then Name end) as Actor
FROM
(
select *,
ROW_NUMBER() OVER (PARTITION BY Occupation ORDER BY Name) as rn
from occupations
) p
GROUP BY rn

//You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.
select node, case 
             when parent is null then 'Root' 
             when node in (select parent from BST) then 'Inner'  -- means it has leafs
             else 'Leaf' end -- it node not in parent column it is a leaf means it has no children
             from BST order by node;


// Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.
- https://www.hackerrank.com/challenges/the-company/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

select c.company_code, c.founder, count(distinct lm.lead_manager_code), count(distinct sm.senior_manager_code), count(distinct m.manager_code), count(distinct e.employee_code)
       from company c 
       inner join lead_manager lm on c.company_code = lm.company_code
       inner join senior_manager sm on sm.lead_manager_code = lm.lead_manager_code
       inner join manager m on sm.senior_manager_code = m.senior_manager_code
       inner join employee e on e.manager_code = m.manager_code
       group by c.company_code,c.founder
       order by company_code;

// Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.
select round(max(LAT_N),4) from station where LAT_N < 137.2345;

// Consider  and  to be two points on a 2D plane.

 a - happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 b - happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 c - happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 d - happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of 4 decimal places.
select round(abs(max(LAT_N) - min(LAT_N)) + abs(max(LONG_W) - min(LONG_W)),4) from station;

Euclidean Distance - 
select round(sqrt(power((max(LAT_N) - min(LAT_N)),2) + 
                  power(max(LONG_W) - min(LONG_W),2)),4) 
    from station;

// find median, here we've to find for a column name LAT_N
select round(LAT_N,4) from (
  select LAT_N, row_number() over (order by LAT_N asc) as rn from station
) as t1 
where t1.rn = round((select count(*) from station)/2,0);

// Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
select case
       when a+b <= c or a+c <= b or b+c <= a then 'Not A Triangle'
       when a=b and b=c then 'Equilateral'
       when a=b or b=c or a=c then 'Isosceles'
       else 'Scalene'
       end
from triangles;

// https://www.hackerrank.com/challenges/print-prime-numbers/forum
delimiter $$
create procedure primenumbers(in input int)
begin
    declare n int unsigned default 1;
    declare p int unsigned default 1;
    declare total int unsigned default 0;
    declare prime text default '';
    while n<=input do
        while p<=n do
            if n % p =0 then set total=total+1;     
            end if;
            set p=p+1;
        end while;
        if total=2 then set prime =concat(prime,n,'&');
        end if;
        set total=0;
        set n=n+1;
        set p=1;
    end while;
    select left(prime,length(prime)-1);
end $$
delimiter ;

call primenumbers(1000);

// https://www.hackerrank.com/challenges/full-score/problem?isFullScreen=true&h_r=next-challenge&h_v=zen
Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.
The following tables contain contest data:

- Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.
- Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the score of the challenge for the difficulty level.
- Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the challenge.
- Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs to, and score is the score of the submission.
SELECT
    s.hacker_id,
    h.name
FROM submissions s
JOIN challenges ch
    ON ch.challenge_id = s.challenge_id
JOIN hackers h
    ON h.hacker_id = s.hacker_id
JOIN difficulty d
    ON d.difficulty_level = ch.difficulty_level
WHERE s.score = d.score
GROUP BY s.hacker_id, h.name
HAVING count(*) > 1
ORDER BY count(*) DESC, s.hacker_id ASC

// Another way of grouping by 
     select ... from table1,(select a,b,,,, from table2, table3 where table1.id = table2.foreign_Key) as JT
     where table1.pk = JT.fk
  more number of tables to join more inner select statements

// https://www.hackerrank.com/challenges/harry-potter-and-wands/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.

Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

Wands: The id is the id of the wand, code is the code of the wand, coins_needed is the total number of gold galleons needed to buy the wand, and power denotes the quality of the wand (the higher the power, the better the wand is).

id | coins_needed | code | power

Wands_Property: The code is the code of the wand, age is the age of the wand, and is_evil denotes whether the wand is good for the dark arts. If the value of is_evil is 0, it means that the wand is not evil. 

code | age | is_evil

SELECT id, age, cn, T.power
FROM Wands as w,
(SELECT w.code, age, w.power, MIN(coins_needed) as cn     -- get the wand with minimum coins required to buy it
FROM Wands as w, Wands_Property as wp
WHERE w.code = wp.code and is_evil=0   -- firstly join no-evil wands
GROUP BY w.code, age, w.power) AS T    -- group all of them based on their power,age and code as we wanna find the one wih min cost
WHERE w.code = T.code and w.power=T.power and w.coins_needed=T.cn -- join the result with the wands table to get the id and age
ORDER BY T.power DESC, age DESC;     -- sort them based on what is needed in the question

// lag vs lead (https://www.geeksforgeeks.org/mysql-lead-and-lag-function/)

DROP PROCEDURE IF EXISTS prc_test;
CREATE PROCEDURE name( test varchar(50))
BEGIN
    SET @sqlstr = CONCAT_WS(' ', 'CREATE DATABASE',  test, 'CHARACTER SET utf8 COLLATE utf8_general_ci');
    SELECT @sqlstr;
    PREPARE stmt FROM @sqlstr;
    EXECUTE stmt;
END;

// https://www.hackerrank.com/challenges/challenges/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.

Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.

Challenges: The challenge_id is the id of the challenge, and hacker_id is the id of the student who created the challenge.

-- maps hackers with the challenges solved and counts how many each hacker has solved
with T as 
(select h.hacker_id, h.name, count(*) as total_challenges from
       hackers h, challenges ch
       where h.hacker_id = ch.hacker_id
       group by ch.hacker_id,h.name
), 
P as -- gets the duplicate values that are not equal to maximum number of challenges solved
( select total_challenges 
  from T 
  where total_challenges <> (select max(total_challenges) from T)
  group by total_challenges
  having count(*) > 1
)
select hacker_id, name, total_challenges
from T
where total_challenges not in (
    select * from P
) -- exclude everything that is duplicate and is not equal to maximum number of challenges solved
order by total_challenges desc, hacker_id asc;

// Always use WITH(as above) whenever we wanna use a set of data or to solve complex inner subqueries rather than using multiple select statements

// https://www.hackerrank.com/challenges/contest-leaderboard/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.

Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker.

Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge for which the submission belongs to, and score is the score of the submission.

with T as -- get max score for each challenge solved by every hacker
(
    select h.hacker_id, h.name, max(sb.score) as max_score, sb.challenge_id
    from hackers h inner join submissions sb
    on sb.hacker_id = h.hacker_id
    group by h.hacker_id, h.name, sb.challenge_id
),
P as -- sum all the max scores for all the challenges
(
  select hacker_id, name, sum(max_score) as total_score
  from T
  group by hacker_id,name,challenge_id
)
select hacker_id, name, total_score from P
where total_score <> 0 -- only scores other than 0
order by total_score desc, hacker_id asc;

//CEIL() : used to get next rounded integer, REPLACE() : used to remove 0 from salary.
SELECT CEIL((AVG(salary)) - (AVG(REPLACE(salary, '0', '')))) AS avg_salary FROM employees;

// https://www.hackerrank.com/challenges/15-days-of-learning-sql/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
Julia conducted a  days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016.
Write a query to print total number of unique hackers who made at least  submission each day (starting on the first day of the contest), and find the hacker_id and name of the hacker who made maximum number of submissions each day. If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. The query should print this information for each day of the contest, sorted by the date.
SELECT
    s.submission_date AS contest_day,
    s.active_hackers,
    s.hacker_id       AS top_hacker_id,
    h.name            AS top_hacker_name
FROM (
    SELECT
        submission_date,
        SUM(contest_day = hacker_active_days) AS active_hackers,
        MIN(top_hacker_id)                    AS hacker_id
    FROM (
        SELECT
            submission_date,
            hacker_id,
            submission_date - MIN(submission_date) OVER () + 1                                           AS contest_day,
            COUNT(submission_date) OVER (PARTITION BY hacker_id       ORDER BY submission_date)          AS hacker_active_days,
            FIRST_VALUE(hacker_id) OVER (PARTITION BY submission_date ORDER BY COUNT(*) DESC, hacker_id) AS top_hacker_id
        FROM Submissions
        WHERE submission_date BETWEEN '2016-03-01' AND '2016-03-15'
        GROUP BY 1, 2
    ) AS s
    GROUP BY 1
)            AS s
JOIN Hackers AS h USING(hacker_id)
ORDER BY 1

// we can use fn(column_name) OVER (PARTITION BY column_name ORDER BY column_name <order>) AS alias_column_name, whenever we wanna find out same thing for a group such as fn = avg, sum, min, max, count of a group of objects, we can use group by but then we'll need to specify all other columns as well that are in the select statement, but using OVER() clause with internal conditions we don't have to do anything as such for ex -

car_make	car_model	car_price	overall average price	car type average price 
Ford		Mondeo		18200			16112.85	20200.00
Renault		Fuego		16500			16112.85	16500.00
Citroen		Cactus		19000			16112.85	20200.00
Ford		Falcon		8990			16112.85	8990.00
Ford		Galaxy		12400			16112.85	13350.00
Renault		Megane		14300			16112.85	13350.00
Citroen		Picasso		23400			16112.85	20200.00

For each car, we want to obtain the make, the model, the price, the average price across all cars, and the average price over the same type of car (to get a better idea of how the price of a given car compared to other cars). Here’s the query:

SELECT
    car_make,
    car_model,
    car_price,
    AVG(car_price) OVER() AS "overall average price",
    AVG(car_price) OVER (PARTITION BY car_type) AS "car type average price"
FROM car_list_prices

with group by - 

SELECT
    car_make,
    car_model,
    car_price,
    AVG(car_price) AS "overall average price",
    AVG(car_price) AS "car type average price"
FROM car_list_prices
group by car_type, car_make, car_model, car_price

// https://stackoverflow.com/questions/18659992/how-to-select-using-with-recursive-clause
we can use recursion with WITH clause
WITH RECURSIVE pseudo-entity-name(column-names) AS (
    Initial-SELECT -- base cacse
UNION ALL
    Recursive-SELECT using pseudo-entity-name -- rest of the function calls
)
Outer-SELECT using pseudo-entity-name -- select statement to select columns from the recursive with clause

// P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* 
* * 
* * * 
* * * * 
* * * * *
Write a query to print the pattern P(20).
-- using with recursive
with recursive triangle as(
    select 1 as counts,cast("*" as char(50))as star -- base case if(n == 1) return '*'
    union all
    select counts + 1, concat(star," *") -- make function calls return n-1,'* ' + fn(n-1) for n = 20
    from triangle
    where counts < 20)
select star
from triangle;

above is equal to
void printStars(int currentRow, string stars)
  if(currentRow > 20)
     return;
  cout << stars << endl;
  printStars(currentRow+1, stars + " *")

printStars(1,"*")

// https://www.hackerrank.com/challenges/interviews/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .

Note: A specific contest can be used to screen candidates at more than one college, but each college only holds  screening contest.

The following tables hold interview data:

Contests: The contest_id is the id of the contest, hacker_id is the id of the hacker who created the contest, and name is the name of the hacker.

Colleges: The college_id is the id of the college, and contest_id is the id of the contest that Samantha used to screen the candidates.

Challenges: The challenge_id is the id of the challenge that belongs to one of the contests whose contest_id Samantha forgot, and college_id is the id of the college where the challenge was given to candidates.

View_Stats: The challenge_id is the id of the challenge, total_views is the number of times the challenge was viewed by candidates, and total_unique_views is the number of times the challenge was viewed by unique candidates.

Submission_Stats: The challenge_id is the id of the challenge, total_submissions is the number of submissions for the challenge, and total_accepted_submission is the number of submissions that achieved full scores.

with T as (                                          -- sum the total_views and total_unique_views based on challenge id
   select challenge_id,
            sum(total_views) as total_views,
            sum(total_unique_views ) as total_unique_views
    from View_Stats
    group by 1
),
P as (                                              -- sum the total_submissions and total_accepted_submissions based on challenge id
  select challenge_id,
            sum(total_submissions) as total_submissions,
            sum(total_accepted_submissions) as  total_accepted_submissions
    from Submission_Stats
    group by 1
)
select co.contest_id, co.hacker_id, co.name,
      sum(P.total_submissions) as total_submissions, 
      sum(P.total_accepted_submissions) as total_accepted_submissions,
      sum(T.total_views) as total_views,
      sum(T.total_unique_views) as total_unique_views
from T 
inner join P vs on T.challenge_id = P.challenge_id
inner join Challenges ch on ch.challenge_id = P.challenge_id
inner join Colleges c on c.college_id = ch.college_id
inner join Contests co on co.contest_id = c.contest_id
group by co.contest_id, co.hacker_id, co.name       -- since we can use same contest for screening at multiple colleges
having total_submissions <> 0 and total_accepted_submissions <> 0 and total_views <> 0 and total_unique_views <> 0
order by co.contest_id asc;

// To display distinct records where records are duplicated either sorted or unsorted
select * from table
where id not in (
  select max(id) from table
  group by name -- or any other column that has duplicates
)
